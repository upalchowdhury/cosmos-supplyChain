// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: supplychain/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ddf06eb043c35bb, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ddf06eb043c35bb, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetConCounterRequest struct {
}

func (m *QueryGetConCounterRequest) Reset()         { *m = QueryGetConCounterRequest{} }
func (m *QueryGetConCounterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetConCounterRequest) ProtoMessage()    {}
func (*QueryGetConCounterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ddf06eb043c35bb, []int{2}
}
func (m *QueryGetConCounterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetConCounterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetConCounterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetConCounterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetConCounterRequest.Merge(m, src)
}
func (m *QueryGetConCounterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetConCounterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetConCounterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetConCounterRequest proto.InternalMessageInfo

type QueryGetConCounterResponse struct {
	ConCounter ConCounter `protobuf:"bytes,1,opt,name=ConCounter,proto3" json:"ConCounter"`
}

func (m *QueryGetConCounterResponse) Reset()         { *m = QueryGetConCounterResponse{} }
func (m *QueryGetConCounterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetConCounterResponse) ProtoMessage()    {}
func (*QueryGetConCounterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ddf06eb043c35bb, []int{3}
}
func (m *QueryGetConCounterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetConCounterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetConCounterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetConCounterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetConCounterResponse.Merge(m, src)
}
func (m *QueryGetConCounterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetConCounterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetConCounterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetConCounterResponse proto.InternalMessageInfo

func (m *QueryGetConCounterResponse) GetConCounter() ConCounter {
	if m != nil {
		return m.ConCounter
	}
	return ConCounter{}
}

type QueryGetActorscontractRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetActorscontractRequest) Reset()         { *m = QueryGetActorscontractRequest{} }
func (m *QueryGetActorscontractRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetActorscontractRequest) ProtoMessage()    {}
func (*QueryGetActorscontractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ddf06eb043c35bb, []int{4}
}
func (m *QueryGetActorscontractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetActorscontractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetActorscontractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetActorscontractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetActorscontractRequest.Merge(m, src)
}
func (m *QueryGetActorscontractRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetActorscontractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetActorscontractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetActorscontractRequest proto.InternalMessageInfo

func (m *QueryGetActorscontractRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetActorscontractResponse struct {
	Actorscontract Actorscontract `protobuf:"bytes,1,opt,name=actorscontract,proto3" json:"actorscontract"`
}

func (m *QueryGetActorscontractResponse) Reset()         { *m = QueryGetActorscontractResponse{} }
func (m *QueryGetActorscontractResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetActorscontractResponse) ProtoMessage()    {}
func (*QueryGetActorscontractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ddf06eb043c35bb, []int{5}
}
func (m *QueryGetActorscontractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetActorscontractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetActorscontractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetActorscontractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetActorscontractResponse.Merge(m, src)
}
func (m *QueryGetActorscontractResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetActorscontractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetActorscontractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetActorscontractResponse proto.InternalMessageInfo

func (m *QueryGetActorscontractResponse) GetActorscontract() Actorscontract {
	if m != nil {
		return m.Actorscontract
	}
	return Actorscontract{}
}

type QueryAllActorscontractRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllActorscontractRequest) Reset()         { *m = QueryAllActorscontractRequest{} }
func (m *QueryAllActorscontractRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllActorscontractRequest) ProtoMessage()    {}
func (*QueryAllActorscontractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ddf06eb043c35bb, []int{6}
}
func (m *QueryAllActorscontractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllActorscontractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllActorscontractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllActorscontractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllActorscontractRequest.Merge(m, src)
}
func (m *QueryAllActorscontractRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllActorscontractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllActorscontractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllActorscontractRequest proto.InternalMessageInfo

func (m *QueryAllActorscontractRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllActorscontractResponse struct {
	Actorscontract []Actorscontract    `protobuf:"bytes,1,rep,name=actorscontract,proto3" json:"actorscontract"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllActorscontractResponse) Reset()         { *m = QueryAllActorscontractResponse{} }
func (m *QueryAllActorscontractResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllActorscontractResponse) ProtoMessage()    {}
func (*QueryAllActorscontractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ddf06eb043c35bb, []int{7}
}
func (m *QueryAllActorscontractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllActorscontractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllActorscontractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllActorscontractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllActorscontractResponse.Merge(m, src)
}
func (m *QueryAllActorscontractResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllActorscontractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllActorscontractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllActorscontractResponse proto.InternalMessageInfo

func (m *QueryAllActorscontractResponse) GetActorscontract() []Actorscontract {
	if m != nil {
		return m.Actorscontract
	}
	return nil
}

func (m *QueryAllActorscontractResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetContractCounterRequest struct {
}

func (m *QueryGetContractCounterRequest) Reset()         { *m = QueryGetContractCounterRequest{} }
func (m *QueryGetContractCounterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetContractCounterRequest) ProtoMessage()    {}
func (*QueryGetContractCounterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ddf06eb043c35bb, []int{8}
}
func (m *QueryGetContractCounterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetContractCounterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetContractCounterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetContractCounterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetContractCounterRequest.Merge(m, src)
}
func (m *QueryGetContractCounterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetContractCounterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetContractCounterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetContractCounterRequest proto.InternalMessageInfo

type QueryGetContractCounterResponse struct {
	ContractCounter ContractCounter `protobuf:"bytes,1,opt,name=ContractCounter,proto3" json:"ContractCounter"`
}

func (m *QueryGetContractCounterResponse) Reset()         { *m = QueryGetContractCounterResponse{} }
func (m *QueryGetContractCounterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetContractCounterResponse) ProtoMessage()    {}
func (*QueryGetContractCounterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ddf06eb043c35bb, []int{9}
}
func (m *QueryGetContractCounterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetContractCounterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetContractCounterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetContractCounterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetContractCounterResponse.Merge(m, src)
}
func (m *QueryGetContractCounterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetContractCounterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetContractCounterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetContractCounterResponse proto.InternalMessageInfo

func (m *QueryGetContractCounterResponse) GetContractCounter() ContractCounter {
	if m != nil {
		return m.ContractCounter
	}
	return ContractCounter{}
}

type QueryGetNewcontractRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetNewcontractRequest) Reset()         { *m = QueryGetNewcontractRequest{} }
func (m *QueryGetNewcontractRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNewcontractRequest) ProtoMessage()    {}
func (*QueryGetNewcontractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ddf06eb043c35bb, []int{10}
}
func (m *QueryGetNewcontractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNewcontractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNewcontractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNewcontractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNewcontractRequest.Merge(m, src)
}
func (m *QueryGetNewcontractRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNewcontractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNewcontractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNewcontractRequest proto.InternalMessageInfo

func (m *QueryGetNewcontractRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetNewcontractResponse struct {
	Newcontract Newcontract `protobuf:"bytes,1,opt,name=newcontract,proto3" json:"newcontract"`
}

func (m *QueryGetNewcontractResponse) Reset()         { *m = QueryGetNewcontractResponse{} }
func (m *QueryGetNewcontractResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNewcontractResponse) ProtoMessage()    {}
func (*QueryGetNewcontractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ddf06eb043c35bb, []int{11}
}
func (m *QueryGetNewcontractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNewcontractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNewcontractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNewcontractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNewcontractResponse.Merge(m, src)
}
func (m *QueryGetNewcontractResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNewcontractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNewcontractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNewcontractResponse proto.InternalMessageInfo

func (m *QueryGetNewcontractResponse) GetNewcontract() Newcontract {
	if m != nil {
		return m.Newcontract
	}
	return Newcontract{}
}

type QueryAllNewcontractRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNewcontractRequest) Reset()         { *m = QueryAllNewcontractRequest{} }
func (m *QueryAllNewcontractRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllNewcontractRequest) ProtoMessage()    {}
func (*QueryAllNewcontractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ddf06eb043c35bb, []int{12}
}
func (m *QueryAllNewcontractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNewcontractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNewcontractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNewcontractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNewcontractRequest.Merge(m, src)
}
func (m *QueryAllNewcontractRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNewcontractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNewcontractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNewcontractRequest proto.InternalMessageInfo

func (m *QueryAllNewcontractRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllNewcontractResponse struct {
	Newcontract []Newcontract       `protobuf:"bytes,1,rep,name=newcontract,proto3" json:"newcontract"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNewcontractResponse) Reset()         { *m = QueryAllNewcontractResponse{} }
func (m *QueryAllNewcontractResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllNewcontractResponse) ProtoMessage()    {}
func (*QueryAllNewcontractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ddf06eb043c35bb, []int{13}
}
func (m *QueryAllNewcontractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNewcontractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNewcontractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNewcontractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNewcontractResponse.Merge(m, src)
}
func (m *QueryAllNewcontractResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNewcontractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNewcontractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNewcontractResponse proto.InternalMessageInfo

func (m *QueryAllNewcontractResponse) GetNewcontract() []Newcontract {
	if m != nil {
		return m.Newcontract
	}
	return nil
}

func (m *QueryAllNewcontractResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "upalchowdhury.supplychain.supplychain.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "upalchowdhury.supplychain.supplychain.QueryParamsResponse")
	proto.RegisterType((*QueryGetConCounterRequest)(nil), "upalchowdhury.supplychain.supplychain.QueryGetConCounterRequest")
	proto.RegisterType((*QueryGetConCounterResponse)(nil), "upalchowdhury.supplychain.supplychain.QueryGetConCounterResponse")
	proto.RegisterType((*QueryGetActorscontractRequest)(nil), "upalchowdhury.supplychain.supplychain.QueryGetActorscontractRequest")
	proto.RegisterType((*QueryGetActorscontractResponse)(nil), "upalchowdhury.supplychain.supplychain.QueryGetActorscontractResponse")
	proto.RegisterType((*QueryAllActorscontractRequest)(nil), "upalchowdhury.supplychain.supplychain.QueryAllActorscontractRequest")
	proto.RegisterType((*QueryAllActorscontractResponse)(nil), "upalchowdhury.supplychain.supplychain.QueryAllActorscontractResponse")
	proto.RegisterType((*QueryGetContractCounterRequest)(nil), "upalchowdhury.supplychain.supplychain.QueryGetContractCounterRequest")
	proto.RegisterType((*QueryGetContractCounterResponse)(nil), "upalchowdhury.supplychain.supplychain.QueryGetContractCounterResponse")
	proto.RegisterType((*QueryGetNewcontractRequest)(nil), "upalchowdhury.supplychain.supplychain.QueryGetNewcontractRequest")
	proto.RegisterType((*QueryGetNewcontractResponse)(nil), "upalchowdhury.supplychain.supplychain.QueryGetNewcontractResponse")
	proto.RegisterType((*QueryAllNewcontractRequest)(nil), "upalchowdhury.supplychain.supplychain.QueryAllNewcontractRequest")
	proto.RegisterType((*QueryAllNewcontractResponse)(nil), "upalchowdhury.supplychain.supplychain.QueryAllNewcontractResponse")
}

func init() { proto.RegisterFile("supplychain/query.proto", fileDescriptor_3ddf06eb043c35bb) }

var fileDescriptor_3ddf06eb043c35bb = []byte{
	// 787 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x4d, 0x4f, 0xd4, 0x5c,
	0x14, 0xc7, 0xe7, 0xc2, 0x03, 0xc9, 0x73, 0x27, 0xe1, 0xc9, 0x73, 0x25, 0x11, 0x8b, 0x14, 0xd2,
	0xc4, 0x97, 0x98, 0xd0, 0x86, 0xd1, 0x11, 0x21, 0x12, 0x9c, 0x41, 0x60, 0x61, 0x62, 0x70, 0x36,
	0x26, 0x6c, 0x4c, 0xa7, 0x5c, 0x3b, 0x93, 0x94, 0xde, 0xd2, 0x17, 0x61, 0x62, 0xdc, 0x98, 0xb8,
	0x70, 0x67, 0xe2, 0x77, 0xf1, 0x03, 0xb8, 0x62, 0xa3, 0x21, 0x61, 0xc3, 0xca, 0x17, 0x60, 0xed,
	0x67, 0x30, 0x73, 0x7b, 0xc6, 0xb9, 0xb7, 0xd3, 0xc1, 0x96, 0x99, 0x5d, 0xdb, 0x7b, 0xcf, 0xff,
	0xfc, 0x7f, 0xed, 0xb9, 0xe7, 0x14, 0x5f, 0x0d, 0x22, 0xcf, 0x73, 0x5a, 0x56, 0xc3, 0x6c, 0xba,
	0xc6, 0x5e, 0x44, 0xfd, 0x96, 0xee, 0xf9, 0x2c, 0x64, 0xe4, 0x46, 0xe4, 0x99, 0x8e, 0xd5, 0x60,
	0xfb, 0x3b, 0x8d, 0xc8, 0x6f, 0xe9, 0xc2, 0x36, 0xf1, 0x5a, 0x99, 0xb4, 0x99, 0xcd, 0x78, 0x84,
	0xd1, 0xbe, 0x8a, 0x83, 0x95, 0xeb, 0x36, 0x63, 0xb6, 0x43, 0x0d, 0xd3, 0x6b, 0x1a, 0xa6, 0xeb,
	0xb2, 0xd0, 0x0c, 0x9b, 0xcc, 0x0d, 0x60, 0xf5, 0x8e, 0xc5, 0x82, 0x5d, 0x16, 0x18, 0x75, 0x33,
	0xa0, 0x71, 0x4e, 0xe3, 0xd5, 0x42, 0x9d, 0x86, 0xe6, 0x82, 0xe1, 0x99, 0x76, 0xd3, 0xe5, 0x9b,
	0x61, 0xef, 0x94, 0xe8, 0xcf, 0x33, 0x7d, 0x73, 0xb7, 0xa3, 0x32, 0x23, 0xae, 0x58, 0xcc, 0x7d,
	0x61, 0xb1, 0xc8, 0x0d, 0xa9, 0x0f, 0xcb, 0x73, 0xe2, 0xb2, 0x69, 0x85, 0xcc, 0x0f, 0x2c, 0xe6,
	0x86, 0xbe, 0x69, 0x85, 0xb0, 0x43, 0x4b, 0x08, 0xf0, 0xb5, 0x84, 0x8a, 0x94, 0xc4, 0xa5, 0xfb,
	0xb2, 0x84, 0x36, 0x89, 0xc9, 0xb3, 0xb6, 0xff, 0x2d, 0x6e, 0xac, 0x46, 0xf7, 0x22, 0x1a, 0x84,
	0x5a, 0x1d, 0x5f, 0x91, 0x9e, 0x06, 0x1e, 0x73, 0x03, 0x4a, 0x9e, 0xe0, 0xf1, 0x18, 0x60, 0x0a,
	0xcd, 0xa1, 0xdb, 0xc5, 0xd2, 0xbc, 0x9e, 0xe9, 0x15, 0xeb, 0xb1, 0x4c, 0xf5, 0x9f, 0xc3, 0x6f,
	0xb3, 0x85, 0x1a, 0x48, 0x68, 0xd3, 0xf8, 0x1a, 0xcf, 0xb1, 0x49, 0xc3, 0x35, 0xe6, 0xae, 0xc5,
	0xa6, 0x3b, 0x06, 0x22, 0xac, 0xa4, 0x2d, 0x82, 0x8f, 0xe7, 0x18, 0x77, 0x9f, 0x82, 0x97, 0x85,
	0x8c, 0x5e, 0xba, 0x81, 0xe0, 0x47, 0x90, 0xd2, 0xca, 0x78, 0xa6, 0x93, 0xb6, 0x22, 0xbd, 0x70,
	0xf0, 0x45, 0x26, 0xf1, 0x58, 0xd3, 0xdd, 0xa1, 0x07, 0x3c, 0xe9, 0xbf, 0xb5, 0xf8, 0x46, 0x7b,
	0x87, 0xb0, 0xda, 0x2f, 0x0e, 0x2c, 0x5b, 0x78, 0x42, 0xfe, 0x84, 0x60, 0xbb, 0x9c, 0xd1, 0xb6,
	0x2c, 0x0b, 0xd6, 0x13, 0x92, 0x9a, 0x0d, 0xf6, 0x2b, 0x8e, 0x93, 0x6e, 0x7f, 0x03, 0xe3, 0x6e,
	0x7d, 0x82, 0x83, 0x9b, 0x7a, 0x5c, 0xcc, 0x7a, 0xbb, 0x98, 0xf5, 0xf8, 0x00, 0x41, 0x31, 0xeb,
	0x5b, 0xa6, 0x4d, 0x21, 0xb6, 0x26, 0x44, 0x6a, 0x5f, 0x3b, 0xc0, 0x29, 0x99, 0x2e, 0x00, 0x1e,
	0x1d, 0x32, 0x30, 0xd9, 0x94, 0x78, 0x46, 0x38, 0xcf, 0xad, 0xbf, 0xf2, 0xc4, 0x0e, 0x25, 0xa0,
	0xb9, 0xee, 0x07, 0x5c, 0x03, 0xf1, 0x44, 0x45, 0xbe, 0x47, 0x78, 0xb6, 0xef, 0x16, 0x60, 0x7e,
	0x89, 0xff, 0x4b, 0x2c, 0xc1, 0x3b, 0xbe, 0x9f, 0xbd, 0x38, 0xc5, 0x68, 0xa0, 0x4e, 0x8a, 0x6a,
	0xa5, 0xee, 0xe9, 0x78, 0xda, 0x3d, 0xd1, 0x17, 0xd7, 0x68, 0x0b, 0x4f, 0xa7, 0xc6, 0x80, 0xf5,
	0x6d, 0x5c, 0x14, 0x9a, 0x03, 0xd8, 0x2e, 0x65, 0xb4, 0x2d, 0x08, 0x82, 0x65, 0x51, 0x4c, 0xdb,
	0x01, 0xbb, 0x15, 0xc7, 0x49, 0xb1, 0x3b, 0xac, 0x9a, 0xfc, 0x8c, 0x80, 0x30, 0x99, 0xa6, 0x1f,
	0xe1, 0xe8, 0xd0, 0x08, 0x87, 0x56, 0x87, 0xa5, 0x5f, 0x45, 0x3c, 0xc6, 0x21, 0xc8, 0x27, 0x84,
	0xc7, 0xe3, 0xbe, 0x49, 0x96, 0x32, 0x9a, 0xec, 0x6d, 0xe4, 0xca, 0xf2, 0x65, 0x42, 0x63, 0x5f,
	0x5a, 0xf9, 0xed, 0xf1, 0xf9, 0xc7, 0x11, 0x83, 0xcc, 0x1b, 0x92, 0x86, 0x21, 0x0e, 0x94, 0xde,
	0xd9, 0x46, 0xbe, 0x20, 0xb1, 0x3b, 0x93, 0x47, 0x79, 0x1c, 0xa4, 0xcd, 0x02, 0xa5, 0x32, 0x80,
	0x02, 0xa0, 0x2c, 0x73, 0x94, 0x7b, 0xa4, 0x94, 0x11, 0x45, 0x18, 0xc6, 0xe4, 0x1c, 0xe1, 0x09,
	0xb9, 0x19, 0x91, 0xc7, 0x39, 0x1d, 0xa5, 0x36, 0x63, 0x65, 0x7d, 0x40, 0x15, 0x60, 0x5b, 0xe7,
	0x6c, 0xab, 0x64, 0x25, 0x23, 0x9b, 0xdc, 0x42, 0x8d, 0xd7, 0xbc, 0x3d, 0xbc, 0x21, 0xdf, 0x11,
	0xfe, 0x5f, 0xce, 0x50, 0x71, 0x9c, 0x7c, 0xa4, 0xfd, 0xc6, 0x4e, 0x3e, 0xd2, 0xbe, 0x23, 0x45,
	0x5b, 0xe1, 0xa4, 0x8b, 0xa4, 0x7c, 0x29, 0x52, 0xf2, 0x13, 0xf5, 0xb4, 0x67, 0xb2, 0x9e, 0xbf,
	0xb6, 0x52, 0x86, 0x83, 0xb2, 0x31, 0xa8, 0x0c, 0x10, 0xae, 0x72, 0xc2, 0x25, 0xb2, 0x98, 0xbd,
	0x4e, 0xa5, 0x7f, 0x3e, 0x72, 0x82, 0x70, 0x51, 0xe8, 0x55, 0x24, 0xef, 0xd9, 0xe9, 0xed, 0xcf,
	0x4a, 0x75, 0x10, 0x09, 0xe0, 0xaa, 0x72, 0xae, 0x87, 0x64, 0x39, 0x23, 0x97, 0xd0, 0x5b, 0xff,
	0x14, 0xe8, 0x31, 0xc2, 0x13, 0x82, 0x76, 0xbb, 0x3a, 0x2b, 0x39, 0xeb, 0x6a, 0x50, 0xba, 0xf4,
	0xc9, 0x92, 0xbb, 0xbb, 0x08, 0x74, 0xd5, 0xda, 0xe1, 0xa9, 0x8a, 0x8e, 0x4e, 0x55, 0xf4, 0xe3,
	0x54, 0x45, 0x1f, 0xce, 0xd4, 0xc2, 0xd1, 0x99, 0x5a, 0x38, 0x39, 0x53, 0x0b, 0xdb, 0x0f, 0xec,
	0x66, 0xd8, 0x88, 0xea, 0xba, 0xc5, 0x76, 0x2f, 0xd0, 0x3d, 0x90, 0xee, 0xc2, 0x96, 0x47, 0x83,
	0xfa, 0x38, 0xff, 0xb5, 0xbf, 0xfb, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x32, 0x72, 0x84, 0x1a,
	0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a ConCounter by index.
	ConCounter(ctx context.Context, in *QueryGetConCounterRequest, opts ...grpc.CallOption) (*QueryGetConCounterResponse, error)
	// Queries a Actorscontract by index.
	Actorscontract(ctx context.Context, in *QueryGetActorscontractRequest, opts ...grpc.CallOption) (*QueryGetActorscontractResponse, error)
	// Queries a list of Actorscontract items.
	ActorscontractAll(ctx context.Context, in *QueryAllActorscontractRequest, opts ...grpc.CallOption) (*QueryAllActorscontractResponse, error)
	// Queries a ContractCounter by index.
	ContractCounter(ctx context.Context, in *QueryGetContractCounterRequest, opts ...grpc.CallOption) (*QueryGetContractCounterResponse, error)
	// Queries a Newcontract by index.
	Newcontract(ctx context.Context, in *QueryGetNewcontractRequest, opts ...grpc.CallOption) (*QueryGetNewcontractResponse, error)
	// Queries a list of Newcontract items.
	NewcontractAll(ctx context.Context, in *QueryAllNewcontractRequest, opts ...grpc.CallOption) (*QueryAllNewcontractResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/upalchowdhury.supplychain.supplychain.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ConCounter(ctx context.Context, in *QueryGetConCounterRequest, opts ...grpc.CallOption) (*QueryGetConCounterResponse, error) {
	out := new(QueryGetConCounterResponse)
	err := c.cc.Invoke(ctx, "/upalchowdhury.supplychain.supplychain.Query/ConCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Actorscontract(ctx context.Context, in *QueryGetActorscontractRequest, opts ...grpc.CallOption) (*QueryGetActorscontractResponse, error) {
	out := new(QueryGetActorscontractResponse)
	err := c.cc.Invoke(ctx, "/upalchowdhury.supplychain.supplychain.Query/Actorscontract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActorscontractAll(ctx context.Context, in *QueryAllActorscontractRequest, opts ...grpc.CallOption) (*QueryAllActorscontractResponse, error) {
	out := new(QueryAllActorscontractResponse)
	err := c.cc.Invoke(ctx, "/upalchowdhury.supplychain.supplychain.Query/ActorscontractAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractCounter(ctx context.Context, in *QueryGetContractCounterRequest, opts ...grpc.CallOption) (*QueryGetContractCounterResponse, error) {
	out := new(QueryGetContractCounterResponse)
	err := c.cc.Invoke(ctx, "/upalchowdhury.supplychain.supplychain.Query/ContractCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Newcontract(ctx context.Context, in *QueryGetNewcontractRequest, opts ...grpc.CallOption) (*QueryGetNewcontractResponse, error) {
	out := new(QueryGetNewcontractResponse)
	err := c.cc.Invoke(ctx, "/upalchowdhury.supplychain.supplychain.Query/Newcontract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NewcontractAll(ctx context.Context, in *QueryAllNewcontractRequest, opts ...grpc.CallOption) (*QueryAllNewcontractResponse, error) {
	out := new(QueryAllNewcontractResponse)
	err := c.cc.Invoke(ctx, "/upalchowdhury.supplychain.supplychain.Query/NewcontractAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a ConCounter by index.
	ConCounter(context.Context, *QueryGetConCounterRequest) (*QueryGetConCounterResponse, error)
	// Queries a Actorscontract by index.
	Actorscontract(context.Context, *QueryGetActorscontractRequest) (*QueryGetActorscontractResponse, error)
	// Queries a list of Actorscontract items.
	ActorscontractAll(context.Context, *QueryAllActorscontractRequest) (*QueryAllActorscontractResponse, error)
	// Queries a ContractCounter by index.
	ContractCounter(context.Context, *QueryGetContractCounterRequest) (*QueryGetContractCounterResponse, error)
	// Queries a Newcontract by index.
	Newcontract(context.Context, *QueryGetNewcontractRequest) (*QueryGetNewcontractResponse, error)
	// Queries a list of Newcontract items.
	NewcontractAll(context.Context, *QueryAllNewcontractRequest) (*QueryAllNewcontractResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ConCounter(ctx context.Context, req *QueryGetConCounterRequest) (*QueryGetConCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConCounter not implemented")
}
func (*UnimplementedQueryServer) Actorscontract(ctx context.Context, req *QueryGetActorscontractRequest) (*QueryGetActorscontractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Actorscontract not implemented")
}
func (*UnimplementedQueryServer) ActorscontractAll(ctx context.Context, req *QueryAllActorscontractRequest) (*QueryAllActorscontractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActorscontractAll not implemented")
}
func (*UnimplementedQueryServer) ContractCounter(ctx context.Context, req *QueryGetContractCounterRequest) (*QueryGetContractCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractCounter not implemented")
}
func (*UnimplementedQueryServer) Newcontract(ctx context.Context, req *QueryGetNewcontractRequest) (*QueryGetNewcontractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Newcontract not implemented")
}
func (*UnimplementedQueryServer) NewcontractAll(ctx context.Context, req *QueryAllNewcontractRequest) (*QueryAllNewcontractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewcontractAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upalchowdhury.supplychain.supplychain.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ConCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetConCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ConCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upalchowdhury.supplychain.supplychain.Query/ConCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ConCounter(ctx, req.(*QueryGetConCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Actorscontract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetActorscontractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Actorscontract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upalchowdhury.supplychain.supplychain.Query/Actorscontract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Actorscontract(ctx, req.(*QueryGetActorscontractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActorscontractAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllActorscontractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActorscontractAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upalchowdhury.supplychain.supplychain.Query/ActorscontractAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActorscontractAll(ctx, req.(*QueryAllActorscontractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetContractCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upalchowdhury.supplychain.supplychain.Query/ContractCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractCounter(ctx, req.(*QueryGetContractCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Newcontract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNewcontractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Newcontract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upalchowdhury.supplychain.supplychain.Query/Newcontract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Newcontract(ctx, req.(*QueryGetNewcontractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NewcontractAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllNewcontractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NewcontractAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upalchowdhury.supplychain.supplychain.Query/NewcontractAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NewcontractAll(ctx, req.(*QueryAllNewcontractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "upalchowdhury.supplychain.supplychain.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ConCounter",
			Handler:    _Query_ConCounter_Handler,
		},
		{
			MethodName: "Actorscontract",
			Handler:    _Query_Actorscontract_Handler,
		},
		{
			MethodName: "ActorscontractAll",
			Handler:    _Query_ActorscontractAll_Handler,
		},
		{
			MethodName: "ContractCounter",
			Handler:    _Query_ContractCounter_Handler,
		},
		{
			MethodName: "Newcontract",
			Handler:    _Query_Newcontract_Handler,
		},
		{
			MethodName: "NewcontractAll",
			Handler:    _Query_NewcontractAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "supplychain/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetConCounterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetConCounterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetConCounterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetConCounterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetConCounterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetConCounterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ConCounter.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetActorscontractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetActorscontractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetActorscontractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetActorscontractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetActorscontractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetActorscontractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Actorscontract.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllActorscontractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllActorscontractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllActorscontractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllActorscontractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllActorscontractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllActorscontractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Actorscontract) > 0 {
		for iNdEx := len(m.Actorscontract) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Actorscontract[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetContractCounterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetContractCounterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetContractCounterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetContractCounterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetContractCounterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetContractCounterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ContractCounter.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetNewcontractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNewcontractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNewcontractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNewcontractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNewcontractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNewcontractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Newcontract.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllNewcontractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNewcontractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNewcontractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllNewcontractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNewcontractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNewcontractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Newcontract) > 0 {
		for iNdEx := len(m.Newcontract) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Newcontract[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetConCounterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetConCounterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ConCounter.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetActorscontractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetActorscontractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Actorscontract.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllActorscontractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllActorscontractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Actorscontract) > 0 {
		for _, e := range m.Actorscontract {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetContractCounterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetContractCounterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ContractCounter.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetNewcontractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNewcontractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Newcontract.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllNewcontractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllNewcontractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Newcontract) > 0 {
		for _, e := range m.Newcontract {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetConCounterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetConCounterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetConCounterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetConCounterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetConCounterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetConCounterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConCounter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConCounter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetActorscontractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetActorscontractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetActorscontractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetActorscontractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetActorscontractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetActorscontractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actorscontract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Actorscontract.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllActorscontractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllActorscontractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllActorscontractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllActorscontractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllActorscontractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllActorscontractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actorscontract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actorscontract = append(m.Actorscontract, Actorscontract{})
			if err := m.Actorscontract[len(m.Actorscontract)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetContractCounterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetContractCounterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetContractCounterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetContractCounterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetContractCounterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetContractCounterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractCounter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ContractCounter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNewcontractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNewcontractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNewcontractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNewcontractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNewcontractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNewcontractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Newcontract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Newcontract.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNewcontractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNewcontractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNewcontractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNewcontractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNewcontractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNewcontractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Newcontract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Newcontract = append(m.Newcontract, Newcontract{})
			if err := m.Newcontract[len(m.Newcontract)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
